1.use jdbc type in the xml mapper
e.g.
<update id="updateXX" parameterType="UserAlias" flush="true">
  UPDATE user SET
    username = #{username, jdbcType=VARCHAR},
    password = #{password.encrypted, jdbcType=VARCHAR},
    administrator = #{administrator, jdbcType=BOOLEAN},
   WHERE
    id = #{id, jdbcType=INTEGER}
</update>

2. http://ysj5125094.iteye.com/blog/2185024/
Mybatis中javaType和jdbcType对应关系
java.sql.Types class

JDBC Type           Java Type  
CHAR                String  
VARCHAR             String  
LONGVARCHAR         String  
NUMERIC             java.math.BigDecimal  
DECIMAL             java.math.BigDecimal  
BIT             boolean  
BOOLEAN             boolean  
TINYINT             byte  
SMALLINT            short  
INTEGER             int  
BIGINT              long  
REAL                float  
FLOAT               double  
DOUBLE              double  
BINARY              byte[]  
VARBINARY           byte[]  
LONGVARBINARY               byte[]  
DATE                java.sql.Date  
TIME                java.sql.Time  
TIMESTAMP           java.sql.Timestamp  
CLOB                Clob  
BLOB                Blob  
ARRAY               Array  
DISTINCT            mapping of underlying type  
STRUCT              Struct  
REF                         Ref  
DATALINK            java.net.URL[color=red][/color]  

3. resultMap usage
in the mapper
<resultMap type="com.a.b.Message" id="MessageResult">
  <id column="id" jdbcType="INTEGER" property="id"/>
  <result column="username jdbcType="VARCHAR" property="username" />
  <result column="password" jdbcType="VARCHAR" property="password.encrypted" />
  <result column="administrator" jdbcType="BOOLEAN" property="administrator" />
</esultMap>
then the is can be used in the same mapper.
<select id="queryMessageList" parameterType="long" resultMap="MessageResult">
  SELECT ID, COMMAND, DESCRIPTION, CONTENT from MESSAGE WHERE 1=1
</select>

4. mybatis OGNL 
String and primitive type -> _parameter
class -> command (prop name)
collection -> array/list/_parameter(map)

<foreach collection="array" index="i" item="item>

and/or/mod/in/not in

5. dynamic sql
<select id="queryMessageList" parameterType="long" resultMap="MessageResult">
  SELECT ID, COMMAND, DESCRIPTION, CONTENT from MESSAGE WHERE 1=1
  <if test="command != null and !&quot;&quot;.equals(command.trim())">and COMMAND=#{command}</if>
</select>

6. show sql on console use logback
https://blog.csdn.net/silk_java/article/details/43487851

7. delete something
<delete id="deleteOne" parameterType="int">
  delete from Message where ID = #{_parameter}
</delete>

<delete id="deleteBatch" parameterType="java.util.List">
  delete from MESSAGE where ID in(
    <foreach collection="list" item="item" separator=",">
      #{item}
    </foreach>
  )
</delete>




